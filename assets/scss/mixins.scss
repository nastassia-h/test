//<mixins>
@mixin anim($time, $delay) {
   -webkit-transition: all $time ease $delay;
   -moz-transition: all $time ease $delay;
   -ms-transition: all $time ease $delay;
   -o-transition: all $time ease $delay;
   transition: all $time ease $delay;
}

@mixin rotate($deg) {
   -webkit-transform: rotate($deg);
   -moz-transform: rotate($deg);
   -ms-transform: rotate($deg);
   -o-transform: rotate($deg);
   transform: rotate($deg);
}

@mixin scale($num) {
   -webkit-transform: scale($num);
   -moz-transform: scale($num);
   -ms-transform: scale($num);
   -o-transform: scale($num);
   transform: scale($num);
}

@mixin skew($x, $y) {
   -webkit-transform: skew($x, $y);
   -moz-transform: skew($x, $y);
   -ms-transform: skew($x, $y);
   -o-transform: skew($x, $y);
   transform: skew($x, $y);
}

@mixin cnt($h) {
   display: flex;
   flex-direction: column;
   height: $h;
   text-align: center;
   align-items: stretch;
   justify-content: center;
}

@mixin tr($x, $y, $z) {
   transform: translate3d($x, $y, $z);
}

@mixin flexbox() {
   display: -webkit-box;
   display: -moz-box;
   display: -ms-flexbox;
   display: -webkit-flex;
   display: flex;
   //font-size: 0;
}

@mixin flexorder($val) {
   -webkit-box-ordinal-group: $val;
   -moz-box-ordinal-group: $val;
   -ms-flex-order: $val;
   -webkit-order: $val;
   order: $val;
}

@function rem($size) {
   @return $size / 16 * 1rem;
}

@function em($space, $size) {
   @return $space / $size * 1em;
}

@mixin adaptiveValue($property, $startSize, $minSize, $type) {
   $addSize: $startSize - $minSize;

   @if $type==1 {
      #{$property}: $startSize + px;

      @media (max-width: #{$maxWidthContainer + px}) {
         #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
      }
   }

   @else if $type==2 {
      #{$property}: $startSize + px;

      @media (min-width: #{$maxWidthContainer + px}) {
         #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
      }
   }

   @else {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
   }
}

//</mixinx>